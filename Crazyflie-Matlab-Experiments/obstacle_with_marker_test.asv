% =========================================================================
% PROYECTO DE GRADUACIÓN: HERRAMIENTAS DE SOFTWARE PARA CRAZYFLIE
% Pablo Javier Caal Leiva - 20538
% -------------------------------------------------------------------------
% Prueba de obstáculo hexagonal con marker en robotat
% =========================================================================

%% Añadir al path las carpetas de comandos usando una ruta relativa
addpath('../Crazyflie-Matlab-Commands');
addpath('../Robotat-Matlab-Commands');
robotat = robotat_connect();

%% Lectura de markers en obstáculos y generación de trayectoria
agent_id = 50;  
origin = robotat_get_pose(robotat, agent_id);

obstacle1_id = 22; 
obstacle1 = robotat_get_pose(robotat, obstacle1_id);

%% Punto de takeoff
takeoff = [origin(1), origin(2), origin(3)+0.5];  
% Punto final previo al aterrizaje
final_point = [takeoff(1), takeoff(2), takeoff(3)+0.5];

% Definir geometría del obstáculo
diameter = 0.25;
radius = diameter/2;
theta = linspace(0, 2*pi, 7);
circle_y = radius * cos(theta);
circle_z = radius * sin(theta);
circle_x = zeros(size(circle_y));  % Los puntos en X están centrados

% Combinar las coordenadas X, Y y Z en una matriz 3xN
circle_points = [circle_x; circle_y; circle_z];

% Obtener el ángulo de yaw (6to valor del array) del obstáculo
yaw_obstacle = 0;

% Definir la rotación en el plano XY (alrededor del eje Z) para el yaw
rotation_matrix_yaw = [cos(yaw_obstacle), -sin(yaw_obstacle), 0;
                       sin(yaw_obstacle),  cos(yaw_obstacle), 0;
                       0,                  0,                 1];

% Aplicar la rotación por yaw
rotated_circle = rotation_matrix_yaw * circle_points;

% Crear la figura
figure;
hold on;

% Graficar el aro del obstáculo con la rotación aplicada
plot3(obstacle1(1) + rotated_circle(1, :), ...
      obstacle1(2) + rotated_circle(2, :), ...
      obstacle1(3) + rotated_circle(3, :), ...
      'r', 'LineWidth', 2);

% Calcular el punto pre-obstacle desplazado en función del yaw del obstáculo
pre_obstacle_distance = 0.3;  % Distancia de desplazamiento antes de atravesar el obstáculo
pre_obstacle = [obstacle1(1) - pre_obstacle_distance * cos(yaw_obstacle), ...
                obstacle1(2) + pre_obstacle_distance * sin(yaw_obstacle), ...
                obstacle1(3)];

post_obstacle_distance = 0.3;
pre_obstacle = [obstacle1(1) + post_obstacle_distance * cos(yaw_obstacle), ...
                obstacle1(2) - post_obstacle_distance * sin(yaw_obstacle), ...
                obstacle1(3)];


plot3(origin(1), origin(2), origin(3), 'ko', 'MarkerSize', 10, 'MarkerFaceColor', 'k');
plot3(takeoff(1), takeoff(2), takeoff(3), 'mo', 'MarkerSize', 10, 'MarkerFaceColor', 'm');
plot3(pre_obstacle(1), pre_obstacle(2), pre_obstacle(3), 'go', 'MarkerSize', 10, 'MarkerFaceColor', 'g');
plot3(pre_obstacle(1), pre_obstacle(2), pre_obstacle(3), 'go', 'MarkerSize', 10, 'MarkerFaceColor', 'g');
plot3(final_point(1), final_point(2), final_point(3), 'bo', 'MarkerSize', 10, 'MarkerFaceColor', 'c');

text(obstacle1(1), obstacle1(2), obstacle1(3), 'Obstacle', 'VerticalAlignment', 'bottom', 'HorizontalAlignment', 'right');
text(origin(1), origin(2), origin(3), 'Origin', 'VerticalAlignment', 'bottom', 'HorizontalAlignment', 'right');
text(takeoff(1), takeoff(2), takeoff(3), 'Takeoff', 'VerticalAlignment', 'bottom', 'HorizontalAlignment', 'right');
text(pre_obstacle(1), pre_obstacle(2), pre_obstacle(3), 'Pre-Obstacle', 'VerticalAlignment', 'bottom', 'HorizontalAlignment', 'right');
text(final_point(1), final_point(2), final_point(3), 'Final Point', 'VerticalAlignment', 'bottom', 'HorizontalAlignment', 'right');

trajectory_points = [takeoff; pre_obstacle; obstacle1(1:3); final_point];

% Interpolación
n_interp = 10;
t = 1:size(trajectory_points, 1); 
t_interp = linspace(1, t(end), n_interp);  
x_interp = interp1(t, trajectory_points(:, 1), t_interp, 'pchip');  % 'pchip' para interpolación cúbica
y_interp = interp1(t, trajectory_points(:, 2), t_interp, 'pchip');
z_interp = interp1(t, trajectory_points(:, 3), t_interp, 'pchip');

plot3(x_interp, y_interp, z_interp, 'm-', 'LineWidth', 2);  % Línea suave
plot3(x_interp, y_interp, z_interp, 'ko', 'MarkerSize', 5, 'MarkerFaceColor', 'k');  % Puntos interpolados

xlabel('X [m]');
ylabel('Y [m]');
zlabel('Z [m]');
title('Trayectoria interpolada que atraviesa el obstáculo con orientación yaw');
grid on;
axis equal;
xlim([-2 0]);
ylim([0 2.5]);
zlim([0 1]);
view(3);
hold off;


%% Ejecución de prueba de 9despegue y aterrizaje
% Conexión con Crazyflie
dron_id = 8;    % ID del dron disponible 
crazyflie_1 = crazyflie_connect(dron_id);
pause(1);

% Take off
crazyflie_takeoff(crazyflie_1);
pause(2);

x = [];
y = [];
z = [];

% Bajar a la altura del obstáculo
x(1) = 0;
y(1) = 0;
z(1) = 0.13;

% Atravesar el obstáculo
x(2) = 0.4;
y(2) = 0;
z(2) = 0.13;

for i = 1:size(x,2)
    crazyflie_send_position(crazyflie_1, x(i), y(i), z(i));
    pause(2);
end

% Land
crazyflie_land(crazyflie_1);
pause(2);

% Desconexión
crazyflie_disconnect(crazyflie_1);
